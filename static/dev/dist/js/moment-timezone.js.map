{"version":3,"sources":["webpack:///./node_modules/moment-timezone/index.js","webpack:///./node_modules/moment-timezone/moment-timezone.js"],"names":["module","exports","__webpack_require__","tz","load","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","root","factory","apply","this","moment","cachedGuess","zones","links","countries","names","guesses","version","logError","momentVersion","split","major","minor","charCodeToInt","charCode","unpackBase60","string","i","parts","whole","fractional","multiplier","out","sign","charCodeAt","length","arrayToInt","array","mapIndices","source","indices","unpack","data","offsets","untils","Math","round","Infinity","name","abbrs","population","Zone","packedString","_set","Country","country_name","zone_names","OffsetAt","at","timeString","toTimeString","abbr","match","join","offset","getTimezoneOffset","ZoneScore","zone","offsetScore","abbrScore","findChange","low","high","mid","diff","Date","sortZoneScores","a","b","localeCompare","addToGuesses","guessesForUserOffsets","j","guessesOffset","offsetsLength","filteredGuesses","hasOwnProperty","push","normalizeName","toLowerCase","replace","addZone","packed","normalized","getZone","caller","link","addLink","aliases","alias","normal0","normal1","needsOffset","m","isUnixTimestamp","_f","_a","_tzm","message","console","error","input","args","Array","prototype","slice","call","arguments","utc","isMoment","add","parse","unpacked","_index","timestamp","target","zone_name","Object","keys","filter","country_code","indexOf","offsetNext","offsetPrev","max","moveAmbiguousForward","moveInvalidForward","mom","utcOffset","scoreOffsetAt","offsetAt","abs","dataVersion","_zones","_links","_names","_countries","country_zones","toUpperCase","zoneExists","didShowError","guess","ignoreCache","intlName","Intl","DateTimeFormat","resolvedOptions","timeZone","e","zoneScore","change","next","startYear","getFullYear","last","zoneScores","sort","rebuildGuess","zonesForCountry","country","with_offset","map","fn","abbrWrap","old","_z","resetZoneWrap","defaultZone","updateOffset","keepTime","_isUTC","_d","z","Error","zoneName","zoneAbbr","local","setDefault","momentProperties","toString"],"mappings":";;;;;;uFAAAA,EAAAC,QAA8BC,0BAAQ,MACtCC,GAAAC,KAAeF,kCAAQ;;;;;;sFCDvB,IAAAG,EAAAC,EAAAC;;;;;;;;;;CAMA,SAAAC,EAAAC,GACA,aAG+BT,EAAAC,QAC/BD,EAAAC,QAAAQ,EAA2BP,eAAQ,OAEjCI,GAAQJ,eAAA,gBAAkBK,EAAA,mBAATF,EAAA,GAASA,EAAAK,MAAAT,EAAAK,GAAAD,KAAAL,EAAAC,QAAAM,IAP5B,CAWCI,GAAA,SAAAC,GACD,aAQA,IAMAC,EALAC,KACAC,KACAC,KACAC,KACAC,KAGAN,GAAA,iBAAAA,EAAAO,SACAC,EAAA,gGAGA,IAAAC,EAAAT,EAAAO,QAAAG,MAAA,KACAC,GAAAF,EAAA,GACAG,GAAAH,EAAA,GAWA,SAAAI,EAAAC,GACA,OAAAA,EAAA,GACAA,EAAA,GACGA,EAAA,GACHA,EAAA,GAEAA,EAAA,GAGA,SAAAC,EAAAC,GACA,IAAAC,EAAA,EACAC,EAAAF,EAAAN,MAAA,KACAS,EAAAD,EAAA,GACAE,EAAAF,EAAA,OACAG,EAAA,EAEAC,EAAA,EACAC,EAAA,EASA,IANA,KAAAP,EAAAQ,WAAA,KACAP,EAAA,EACAM,GAAA,GAISN,EAAAE,EAAAM,OAAkBR,IAE3BK,EAAA,GAAAA,EADAT,EAAAM,EAAAK,WAAAP,IAKA,IAAAA,EAAA,EAAaA,EAAAG,EAAAK,OAAuBR,IACpCI,GAAA,GAEAC,GADAT,EAAAO,EAAAI,WAAAP,IACAI,EAGA,OAAAC,EAAAC,EAGA,SAAAG,EAAAC,GACA,QAAAV,EAAA,EAAiBA,EAAAU,EAAAF,OAAkBR,IACnCU,EAAAV,GAAAF,EAAAY,EAAAV,IAYA,SAAAW,EAAAC,EAAAC,GACA,IAAAb,EAAAK,KAEA,IAAAL,EAAA,EAAaA,EAAAa,EAAAL,OAAoBR,IACjCK,EAAAL,GAAAY,EAAAC,EAAAb,IAGA,OAAAK,EAGA,SAAAS,EAAAf,GACA,IAAAgB,EAAAhB,EAAAN,MAAA,KACAuB,EAAAD,EAAA,GAAAtB,MAAA,KACAoB,EAAAE,EAAA,GAAAtB,MAAA,IACAwB,EAAAF,EAAA,GAAAtB,MAAA,KAQA,OANAgB,EAAAO,GACAP,EAAAI,GACAJ,EAAAQ,GA1BA,SAAAP,EAAAF,GACA,QAAAR,EAAA,EAAiBA,EAAAQ,EAAYR,IAC7BU,EAAAV,GAAAkB,KAAAC,OAAAT,EAAAV,EAAA,WAAAU,EAAAV,IAGAU,EAAAF,EAAA,GAAAY,IALA,CA4BAH,EAAAJ,EAAAL,SAGAa,KAAAN,EAAA,GACAO,MAAAX,EAAAI,EAAA,GAAAtB,MAAA,KAAAoB,GACAG,QAAAL,EAAAK,EAAAH,GACAI,SACAM,WAAA,EAAAR,EAAA,IAQA,SAAAS,EAAAC,GACAA,GACA3C,KAAA4C,KAAAZ,EAAAW,IA4EA,SAAAE,EAAAC,EAAAC,GACA/C,KAAAuC,KAAAO,EACA9C,KAAAG,MAAA4C,EAOA,SAAAC,EAAAC,GACA,IAAAC,EAAAD,EAAAE,eACAC,EAAAF,EAAAG,MAAA,gBAaA,SARAD,EAJAA,KAAA,IAGAA,IAAA,GAAAC,MAAA,WACAD,EAAAE,KAAA,YAIAF,EAAAF,EAAAG,MAAA,gBACAD,EAAA,aAIAA,UAGApD,KAAAiD,MACAjD,KAAAoD,OACApD,KAAAuD,OAAAN,EAAAO,oBAGA,SAAAC,EAAAC,GACA1D,KAAA0D,OACA1D,KAAA2D,YAAA,EACA3D,KAAA4D,UAAA,EAUA,SAAAC,EAAAC,EAAAC,GAGA,IAFA,IAAAC,EAAAC,EAEAA,EAAA,MAAAF,EAAAd,GAAAa,EAAAb,IAAA,UACAe,EAAA,IAAAhB,EAAA,IAAAkB,KAAAJ,EAAAb,GAAAgB,KACAV,SAAAO,EAAAP,OACAO,EAAAE,EAEAD,EAAAC,EAIA,OAAAF,EA2BA,SAAAK,EAAAC,EAAAC,GACA,OAAAD,EAAAT,cAAAU,EAAAV,YACAS,EAAAT,YAAAU,EAAAV,YAEAS,EAAAR,YAAAS,EAAAT,UACAQ,EAAAR,UAAAS,EAAAT,UAEAQ,EAAAV,KAAAjB,aAAA4B,EAAAX,KAAAjB,WACA4B,EAAAX,KAAAjB,WAAA2B,EAAAV,KAAAjB,WAEA4B,EAAAX,KAAAnB,KAAA+B,cAAAF,EAAAV,KAAAnB,MAGA,SAAAgC,EAAAhC,EAAAL,GACA,IAAAhB,EAAAqC,EAEA,IADA5B,EAAAO,GACAhB,EAAA,EAAaA,EAAAgB,EAAAR,OAAoBR,IACjCqC,EAAArB,EAAAhB,GACAX,EAAAgD,GAAAhD,EAAAgD,OACAhD,EAAAgD,GAAAhB,MAIA,SAAAiC,EAAAtC,GACA,IAGAhB,EAAAuD,EAAAC,EAHAC,EAAAzC,EAAAR,OACAkD,KACArD,KAGA,IAAAL,EAAA,EAAaA,EAAAyD,EAAmBzD,IAEhC,IAAAuD,KADAC,EAAAnE,EAAA2B,EAAAhB,GAAAqC,YAEAmB,EAAAG,eAAAJ,KACAG,EAAAH,OAKA,IAAAvD,KAAA0D,EACAA,EAAAC,eAAA3D,IACAK,EAAAuD,KAAAxE,EAAAY,IAIA,OAAAK,EAiDA,SAAAwD,EAAAxC,GACA,OAAAA,GAAA,IAAAyC,cAAAC,QAAA,WAGA,SAAAC,EAAAC,GACA,IAAAjE,EAAAqB,EAAA5B,EAAAyE,EAMA,IAJA,iBAAAD,IACAA,OAGAjE,EAAA,EAAaA,EAAAiE,EAAAzD,OAAmBR,IAGhCkE,EAAAL,EADAxC,GADA5B,EAAAwE,EAAAjE,GAAAP,MAAA,MACA,IAEAR,EAAAiF,GAAAD,EAAAjE,GACAZ,EAAA8E,GAAA7C,EACAgC,EAAAa,EAAAzE,EAAA,GAAAA,MAAA,MAIA,SAAA0E,EAAA9C,EAAA+C,GAEA/C,EAAAwC,EAAAxC,GAEA,IACAgD,EADA7B,EAAAvD,EAAAoC,GAGA,OAAAmB,aAAAhB,EACAgB,EAGA,iBAAAA,GACAA,EAAA,IAAAhB,EAAAgB,GACAvD,EAAAoC,GAAAmB,EACAA,GAIAtD,EAAAmC,IAAA+C,IAAAD,IAAAE,EAAAF,EAAAjF,EAAAmC,GAAA8C,MACA3B,EAAAvD,EAAAoC,GAAA,IAAAG,GACAE,KAAA2C,GACA7B,EAAAnB,KAAAjC,EAAAiC,GACAmB,GAGA,KAmBA,SAAA8B,EAAAC,GACA,IAAAvE,EAAAwE,EAAAC,EAAAC,EAMA,IAJA,iBAAAH,IACAA,OAGAvE,EAAA,EAAaA,EAAAuE,EAAA/D,OAAoBR,IAGjCyE,EAAAZ,GAFAW,EAAAD,EAAAvE,GAAAP,MAAA,MAEA,IACAiF,EAAAb,EAAAW,EAAA,IAEAtF,EAAAuF,GAAAC,EACAtF,EAAAqF,GAAAD,EAAA,GAEAtF,EAAAwF,GAAAD,EACArF,EAAAsF,GAAAF,EAAA,GA0DA,SAAAG,EAAAC,GACA,IAAAC,EAAA,MAAAD,EAAAE,IAAA,MAAAF,EAAAE,GACA,SAAAF,EAAAG,aAAAH,EAAAI,MAAAH,GAGA,SAAAtF,EAAA0F,GACA,oBAAAC,SAAA,mBAAAA,QAAAC,OACAD,QAAAC,MAAAF,GAQA,SAAA3G,EAAA8G,GACA,IAAAC,EAAAC,MAAAC,UAAAC,MAAAC,KAAAC,UAAA,MACArE,EAAAqE,oBAAAlF,OAAA,GACAgC,EAAA2B,EAAA9C,GACAhB,EAAAtB,EAAA4G,IAAA9G,MAAA,KAAAwG,GAQA,OANA7C,IAAAzD,EAAA6G,SAAAR,IAAAT,EAAAtE,IACAA,EAAAwF,IAAArD,EAAAsD,MAAAzF,GAAA,WAGAA,EAAA/B,GAAA+C,GAEAhB,GAzgBAX,EAAA,OAAAA,GAAAC,EAAA,IACAJ,EAAA,wEAAAR,EAAAO,QAAA,sBAuGAkC,EAAA+D,WACA7D,KAAA,SAAAqE,GACAjH,KAAAuC,KAAA0E,EAAA1E,KACAvC,KAAAwC,MAAAyE,EAAAzE,MACAxC,KAAAmC,OAAA8E,EAAA9E,OACAnC,KAAAkC,QAAA+E,EAAA/E,QACAlC,KAAAyC,WAAAwE,EAAAxE,YAGAyE,OAAA,SAAAC,GACA,IAEAjG,EAFAkG,GAAAD,EACAhF,EAAAnC,KAAAmC,OAGA,IAAAjB,EAAA,EAAcA,EAAAiB,EAAAT,OAAmBR,IACjC,GAAAkG,EAAAjF,EAAAjB,GACA,OAAAA,GAKAb,UAAA,WACA,IAAAgH,EAAArH,KAAAuC,KACA,OAAA+E,OAAAC,KAAAlH,GAAAmH,QAAA,SAAAC,GACA,WAAApH,EAAAoH,GAAAtH,MAAAuH,QAAAL,OAIAL,MAAA,SAAAG,GACA,IAIA5D,EAAAoE,EAAAC,EAAA1G,EAJAkG,GAAAD,EACAjF,EAAAlC,KAAAkC,QACAC,EAAAnC,KAAAmC,OACA0F,EAAA1F,EAAAT,OAAA,EAGA,IAAAR,EAAA,EAAcA,EAAA2G,EAAS3G,IAWvB,GAVAqC,EAAArB,EAAAhB,GACAyG,EAAAzF,EAAAhB,EAAA,GACA0G,EAAA1F,EAAAhB,IAAA,EAAAA,GAEAqC,EAAAoE,GAAAnI,EAAAsI,qBACAvE,EAAAoE,EACKpE,EAAAqE,GAAApI,EAAAuI,qBACLxE,EAAAqE,GAGAR,EAAAjF,EAAAjB,GAAA,IAAAqC,EACA,OAAArB,EAAAhB,GAIA,OAAAgB,EAAA2F,IAGAzE,KAAA,SAAA4E,GACA,OAAAhI,KAAAwC,MAAAxC,KAAAkH,OAAAc,KAGAzE,OAAA,SAAAyE,GAEA,OADAvH,EAAA,8DACAT,KAAAkC,QAAAlC,KAAAkH,OAAAc,KAGAC,UAAA,SAAAD,GACA,OAAAhI,KAAAkC,QAAAlC,KAAAkH,OAAAc,MA+CAvE,EAAAgD,UAAAyB,cAAA,SAAAC,GACAnI,KAAA2D,aAAAvB,KAAAgG,IAAApI,KAAA0D,KAAAuE,UAAAE,EAAAlF,IAAAkF,EAAA5E,QACAvD,KAAA0D,KAAAN,KAAA+E,EAAAlF,IAAAgC,QAAA,gBAAAkD,EAAA/E,MACApD,KAAA4D,aAkTApE,EAAAgB,QA7hBA,SA8hBAhB,EAAA6I,YAAA,GACA7I,EAAA8I,OAAAnI,EACAX,EAAA+I,OAAAnI,EACAZ,EAAAgJ,OAAAlI,EACAd,EAAAiJ,WAAApI,EACAb,EAAAuH,IAAA7B,EACA1F,EAAA+F,KAAAC,EACAhG,EAAAC,KArDA,SAAAwC,GACAiD,EAAAjD,EAAA9B,OACAqF,EAAAvD,EAAA7B,OAzCA,SAAA6B,GACA,IAAAf,EAAAuG,EAAAiB,EAAA/H,EACA,GAAAsB,KAAAP,OACA,IAAAR,EAAA,EAAaA,EAAAe,EAAAP,OAAiBR,IAE9BuG,GADA9G,EAAAsB,EAAAf,GAAAP,MAAA,MACA,GAAAgI,cACAD,EAAA/H,EAAA,GAAAA,MAAA,KACAN,EAAAoH,GAAA,IAAA5E,EACA4E,EACAiB,GATA,CA0CAzG,EAAA5B,WACAb,EAAA6I,YAAApG,EAAAzB,SAkDAhB,EAAAkE,KAAA2B,EACA7F,EAAAoJ,WAhDA,SAAAA,EAAArG,GAKA,OAJAqG,EAAAC,eACAD,EAAAC,gBACApI,EAAA,yBAAA8B,EAAA,uDAAAA,EAAA,SAEA8C,EAAA9C,IA4CA/C,EAAAsJ,MAhMA,SAAAC,GAIA,OAHA7I,IAAA6I,IACA7I,EArCA,WAGA,IACA,IAAA8I,EAAAC,KAAAC,iBAAAC,kBAAAC,SACA,GAAAJ,KAAAtH,OAAA,GACA,IAAAa,EAAAjC,EAAAyE,EAAAiE,IACA,GAAAzG,EACA,OAAAA,EAEA9B,EAAA,yBAAAuI,EAAA,2DAEG,MAAAK,IAIH,IAIAC,EAAApI,EAAAuD,EAJAvC,EAvFA,WACA,IAGAqH,EAAAC,EAAAtI,EAHAuI,OAAAvF,MAAAwF,cAAA,EACAC,EAAA,IAAA3G,EAAA,IAAAkB,KAAAuF,EAAA,MACAvH,GAAAyH,GAGA,IAAAzI,EAAA,EAAaA,EAAA,GAAQA,KACrBsI,EAAA,IAAAxG,EAAA,IAAAkB,KAAAuF,EAAAvI,EAAA,KACAqC,SAAAoG,EAAApG,SACAgG,EAAA1F,EAAA8F,EAAAH,GACAtH,EAAA4C,KAAAyE,GACArH,EAAA4C,KAAA,IAAA9B,EAAA,IAAAkB,KAAAqF,EAAAtG,GAAA,QAEA0G,EAAAH,EAGA,IAAAtI,EAAA,EAAaA,EAAA,EAAOA,IACpBgB,EAAA4C,KAAA,IAAA9B,EAAA,IAAAkB,KAAAuF,EAAAvI,EAAA,OACAgB,EAAA4C,KAAA,IAAA9B,EAAA,IAAAkB,KAAAuF,EAAAvI,EAAA,OAGA,OAAAgB,EArBA,GAwFAyC,EAAAzC,EAAAR,OACAnB,EAAAiE,EAAAtC,GACA0H,KAGA,IAAA1I,EAAA,EAAaA,EAAAX,EAAAmB,OAAoBR,IAAA,CAEjC,IADAoI,EAAA,IAAA7F,EAAA4B,EAAA9E,EAAAW,IAAAyD,GACAF,EAAA,EAAcA,EAAAE,EAAmBF,IACjC6E,EAAApB,cAAAhG,EAAAuC,IAEAmF,EAAA9E,KAAAwE,GAKA,OAFAM,EAAAC,KAAA1F,GAEAyF,EAAAlI,OAAA,EAAAkI,EAAA,GAAAlG,KAAAnB,YAKAuH,IAEA5J,GA6LAV,EAAAc,MArIA,WACA,IAAAY,EAAAK,KAEA,IAAAL,KAAAZ,EACAA,EAAAuE,eAAA3D,KAAAf,EAAAe,IAAAf,EAAAC,EAAAc,MAAAZ,EAAAY,IACAK,EAAAuD,KAAAxE,EAAAY,IAIA,OAAAK,EAAAsI,QA6HArK,EAAAkD,OACAlD,EAAAwC,SACAxC,EAAAwB,eACAxB,EAAAqG,cACArG,EAAAuI,sBACAvI,EAAAsI,wBACAtI,EAAAa,UAhIA,WACA,OAAAiH,OAAAC,KAAAlH,IAgIAb,EAAAuK,gBArFA,SAAAC,EAAAC,GAGA,KAFAD,EANA,SAAAzH,GAEA,OADAA,IAAAoG,cACAtI,EAAAkC,IAAA,KAFA,CAMAyH,IAEA,YAEA,IAAA7J,EAAA6J,EAAA7J,MAAA0J,OAEA,OAAAI,EACA9J,EAAA+J,KAAA,SAAA7C,GAEA,OACA9E,KAAA8E,EACA9D,OAHA8B,EAAAgC,GAGAY,UAAA,IAAA/D,UAKA/D,GA0EA,IAAAgK,EAAAlK,EAAAkK,GAgDA,SAAAC,EAAAC,GACA,kBACA,OAAArK,KAAAsK,GAAiBtK,KAAAsK,GAAAlH,KAAApD,MACjBqK,EAAA1D,KAAA3G,OAIA,SAAAuK,EAAAF,GACA,kBAEA,OADArK,KAAAsK,GAAA,KACAD,EAAAtK,MAAAC,KAAA4G,YAxDA3G,EAAAT,KAEAS,EAAAuK,YAAA,KAEAvK,EAAAwK,aAAA,SAAAzC,EAAA0C,GACA,IACAnH,EADAG,EAAAzD,EAAAuK,YAUA,YAPAxC,EAAAsC,KACA5G,GAAAmC,EAAAmC,OAAA2C,SACA3C,EAAA4C,GAAA3K,EAAA4G,IAAAmB,EAAA/B,IAAA2E,GACA5C,EAAAnB,MAAAE,IAAArD,EAAAsD,MAAAgB,GAAA,YAEAA,EAAAsC,GAAA5G,GAEAsE,EAAAsC,GAKA,GAJA/G,EAAAyE,EAAAsC,GAAArC,UAAAD,GACA5F,KAAAgG,IAAA7E,GAAA,KACAA,GAAA,aAEAyE,EAAAC,UAAA,CACA,IAAA4C,EAAA7C,EAAAsC,GACAtC,EAAAC,WAAA1E,EAAAmH,GACA1C,EAAAsC,GAAAO,OAEA7C,EAAAtE,KAAAH,EAAAmH,IAKAP,EAAA3K,GAAA,SAAA+C,EAAAmI,GACA,GAAAnI,EAAA,CACA,oBAAAA,EACA,UAAAuI,MAAA,wCAAAvI,EAAA,YAAAA,EAAA,KAQA,OANAvC,KAAAsK,GAAAjF,EAAA9C,GACAvC,KAAAsK,GACArK,EAAAwK,aAAAzK,KAAA0K,GAEAjK,EAAA,mCAAA8B,EAAA,4DAEAvC,KAEA,GAAAA,KAAAsK,GAAgB,OAAAtK,KAAAsK,GAAA/H,MAwBhB4H,EAAAY,SAAAX,EAAAD,EAAAY,UACAZ,EAAAa,SAAAZ,EAAAD,EAAAa,UACAb,EAAAtD,IAAA0D,EAAAJ,EAAAtD,KACAsD,EAAAc,MAAAV,EAAAJ,EAAAc,OACAd,EAAAlC,UAXA,SAAAoC,GACA,kBAEA,OADAzD,UAAAlF,OAAA,IAAA1B,KAAAsK,GAAA,MACAD,EAAAtK,MAAAC,KAAA4G,YAHA,CAWAuD,EAAAlC,WAEAhI,EAAAT,GAAA0L,WAAA,SAAA3I,GAKA,OAJA3B,EAAA,OAAAA,GAAAC,EAAA,IACAJ,EAAA,qFAAAR,EAAAO,QAAA,KAEAP,EAAAuK,YAAAjI,EAAA8C,EAAA9C,GAAA,KACAtC,GAIA,IAAAkL,EAAAlL,EAAAkL,iBAYA,MAXA,mBAAA7D,OAAAb,UAAA2E,SAAAzE,KAAAwE,IAEAA,EAAArG,KAAA,MACAqG,EAAArG,KAAA,OACEqG,IAEFA,EAAAb,GAAA,MAKArK","file":"dev/dist/js/moment-timezone.js","sourcesContent":["var moment = module.exports = require(\"./moment-timezone\");\nmoment.tz.load(require('./data/packed/latest.json'));\n","//! moment-timezone.js\n//! version : 0.5.28\n//! Copyright (c) JS Foundation and other contributors\n//! license : MIT\n//! github.com/moment/moment-timezone\n\n(function (root, factory) {\n\t\"use strict\";\n\n\t/*global define*/\n\tif (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = factory(require('moment')); // Node\n\t} else if (typeof define === 'function' && define.amd) {\n\t\tdefine(['moment'], factory);                 // AMD\n\t} else {\n\t\tfactory(root.moment);                        // Browser\n\t}\n}(this, function (moment) {\n\t\"use strict\";\n\n\t// Do not load moment-timezone a second time.\n\t// if (moment.tz !== undefined) {\n\t// \tlogError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);\n\t// \treturn moment;\n\t// }\n\n\tvar VERSION = \"0.5.28\",\n\t\tzones = {},\n\t\tlinks = {},\n\t\tcountries = {},\n\t\tnames = {},\n\t\tguesses = {},\n\t\tcachedGuess;\n\n\tif (!moment || typeof moment.version !== 'string') {\n\t\tlogError('Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/');\n\t}\n\n\tvar momentVersion = moment.version.split('.'),\n\t\tmajor = +momentVersion[0],\n\t\tminor = +momentVersion[1];\n\n\t// Moment.js version check\n\tif (major < 2 || (major === 2 && minor < 6)) {\n\t\tlogError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');\n\t}\n\n\t/************************************\n\t\tUnpacking\n\t************************************/\n\n\tfunction charCodeToInt(charCode) {\n\t\tif (charCode > 96) {\n\t\t\treturn charCode - 87;\n\t\t} else if (charCode > 64) {\n\t\t\treturn charCode - 29;\n\t\t}\n\t\treturn charCode - 48;\n\t}\n\n\tfunction unpackBase60(string) {\n\t\tvar i = 0,\n\t\t\tparts = string.split('.'),\n\t\t\twhole = parts[0],\n\t\t\tfractional = parts[1] || '',\n\t\t\tmultiplier = 1,\n\t\t\tnum,\n\t\t\tout = 0,\n\t\t\tsign = 1;\n\n\t\t// handle negative numbers\n\t\tif (string.charCodeAt(0) === 45) {\n\t\t\ti = 1;\n\t\t\tsign = -1;\n\t\t}\n\n\t\t// handle digits before the decimal\n\t\tfor (i; i < whole.length; i++) {\n\t\t\tnum = charCodeToInt(whole.charCodeAt(i));\n\t\t\tout = 60 * out + num;\n\t\t}\n\n\t\t// handle digits after the decimal\n\t\tfor (i = 0; i < fractional.length; i++) {\n\t\t\tmultiplier = multiplier / 60;\n\t\t\tnum = charCodeToInt(fractional.charCodeAt(i));\n\t\t\tout += num * multiplier;\n\t\t}\n\n\t\treturn out * sign;\n\t}\n\n\tfunction arrayToInt (array) {\n\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\tarray[i] = unpackBase60(array[i]);\n\t\t}\n\t}\n\n\tfunction intToUntil (array, length) {\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tarray[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds\n\t\t}\n\n\t\tarray[length - 1] = Infinity;\n\t}\n\n\tfunction mapIndices (source, indices) {\n\t\tvar out = [], i;\n\n\t\tfor (i = 0; i < indices.length; i++) {\n\t\t\tout[i] = source[indices[i]];\n\t\t}\n\n\t\treturn out;\n\t}\n\n\tfunction unpack (string) {\n\t\tvar data = string.split('|'),\n\t\t\toffsets = data[2].split(' '),\n\t\t\tindices = data[3].split(''),\n\t\t\tuntils  = data[4].split(' ');\n\n\t\tarrayToInt(offsets);\n\t\tarrayToInt(indices);\n\t\tarrayToInt(untils);\n\n\t\tintToUntil(untils, indices.length);\n\n\t\treturn {\n\t\t\tname       : data[0],\n\t\t\tabbrs      : mapIndices(data[1].split(' '), indices),\n\t\t\toffsets    : mapIndices(offsets, indices),\n\t\t\tuntils     : untils,\n\t\t\tpopulation : data[5] | 0\n\t\t};\n\t}\n\n\t/************************************\n\t\tZone object\n\t************************************/\n\n\tfunction Zone (packedString) {\n\t\tif (packedString) {\n\t\t\tthis._set(unpack(packedString));\n\t\t}\n\t}\n\n\tZone.prototype = {\n\t\t_set : function (unpacked) {\n\t\t\tthis.name       = unpacked.name;\n\t\t\tthis.abbrs      = unpacked.abbrs;\n\t\t\tthis.untils     = unpacked.untils;\n\t\t\tthis.offsets    = unpacked.offsets;\n\t\t\tthis.population = unpacked.population;\n\t\t},\n\n\t\t_index : function (timestamp) {\n\t\t\tvar target = +timestamp,\n\t\t\t\tuntils = this.untils,\n\t\t\t\ti;\n\n\t\t\tfor (i = 0; i < untils.length; i++) {\n\t\t\t\tif (target < untils[i]) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tcountries : function () {\n\t\t\tvar zone_name = this.name;\n\t\t\treturn Object.keys(countries).filter(function (country_code) {\n\t\t\t\treturn countries[country_code].zones.indexOf(zone_name) !== -1;\n\t\t\t});\n\t\t},\n\n\t\tparse : function (timestamp) {\n\t\t\tvar target  = +timestamp,\n\t\t\t\toffsets = this.offsets,\n\t\t\t\tuntils  = this.untils,\n\t\t\t\tmax     = untils.length - 1,\n\t\t\t\toffset, offsetNext, offsetPrev, i;\n\n\t\t\tfor (i = 0; i < max; i++) {\n\t\t\t\toffset     = offsets[i];\n\t\t\t\toffsetNext = offsets[i + 1];\n\t\t\t\toffsetPrev = offsets[i ? i - 1 : i];\n\n\t\t\t\tif (offset < offsetNext && tz.moveAmbiguousForward) {\n\t\t\t\t\toffset = offsetNext;\n\t\t\t\t} else if (offset > offsetPrev && tz.moveInvalidForward) {\n\t\t\t\t\toffset = offsetPrev;\n\t\t\t\t}\n\n\t\t\t\tif (target < untils[i] - (offset * 60000)) {\n\t\t\t\t\treturn offsets[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn offsets[max];\n\t\t},\n\n\t\tabbr : function (mom) {\n\t\t\treturn this.abbrs[this._index(mom)];\n\t\t},\n\n\t\toffset : function (mom) {\n\t\t\tlogError(\"zone.offset has been deprecated in favor of zone.utcOffset\");\n\t\t\treturn this.offsets[this._index(mom)];\n\t\t},\n\n\t\tutcOffset : function (mom) {\n\t\t\treturn this.offsets[this._index(mom)];\n\t\t}\n\t};\n\n\t/************************************\n\t\tCountry object\n\t************************************/\n\n\tfunction Country (country_name, zone_names) {\n\t\tthis.name = country_name;\n\t\tthis.zones = zone_names;\n\t}\n\n\t/************************************\n\t\tCurrent Timezone\n\t************************************/\n\n\tfunction OffsetAt(at) {\n\t\tvar timeString = at.toTimeString();\n\t\tvar abbr = timeString.match(/\\([a-z ]+\\)/i);\n\t\tif (abbr && abbr[0]) {\n\t\t\t// 17:56:31 GMT-0600 (CST)\n\t\t\t// 17:56:31 GMT-0600 (Central Standard Time)\n\t\t\tabbr = abbr[0].match(/[A-Z]/g);\n\t\t\tabbr = abbr ? abbr.join('') : undefined;\n\t\t} else {\n\t\t\t// 17:56:31 CST\n\t\t\t// 17:56:31 GMT+0800 (台北標準時間)\n\t\t\tabbr = timeString.match(/[A-Z]{3,5}/g);\n\t\t\tabbr = abbr ? abbr[0] : undefined;\n\t\t}\n\n\t\tif (abbr === 'GMT') {\n\t\t\tabbr = undefined;\n\t\t}\n\n\t\tthis.at = +at;\n\t\tthis.abbr = abbr;\n\t\tthis.offset = at.getTimezoneOffset();\n\t}\n\n\tfunction ZoneScore(zone) {\n\t\tthis.zone = zone;\n\t\tthis.offsetScore = 0;\n\t\tthis.abbrScore = 0;\n\t}\n\n\tZoneScore.prototype.scoreOffsetAt = function (offsetAt) {\n\t\tthis.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);\n\t\tif (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {\n\t\t\tthis.abbrScore++;\n\t\t}\n\t};\n\n\tfunction findChange(low, high) {\n\t\tvar mid, diff;\n\n\t\twhile ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {\n\t\t\tmid = new OffsetAt(new Date(low.at + diff));\n\t\t\tif (mid.offset === low.offset) {\n\t\t\t\tlow = mid;\n\t\t\t} else {\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n\tfunction userOffsets() {\n\t\tvar startYear = new Date().getFullYear() - 2,\n\t\t\tlast = new OffsetAt(new Date(startYear, 0, 1)),\n\t\t\toffsets = [last],\n\t\t\tchange, next, i;\n\n\t\tfor (i = 1; i < 48; i++) {\n\t\t\tnext = new OffsetAt(new Date(startYear, i, 1));\n\t\t\tif (next.offset !== last.offset) {\n\t\t\t\tchange = findChange(last, next);\n\t\t\t\toffsets.push(change);\n\t\t\t\toffsets.push(new OffsetAt(new Date(change.at + 6e4)));\n\t\t\t}\n\t\t\tlast = next;\n\t\t}\n\n\t\tfor (i = 0; i < 4; i++) {\n\t\t\toffsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));\n\t\t\toffsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));\n\t\t}\n\n\t\treturn offsets;\n\t}\n\n\tfunction sortZoneScores (a, b) {\n\t\tif (a.offsetScore !== b.offsetScore) {\n\t\t\treturn a.offsetScore - b.offsetScore;\n\t\t}\n\t\tif (a.abbrScore !== b.abbrScore) {\n\t\t\treturn a.abbrScore - b.abbrScore;\n\t\t}\n\t\tif (a.zone.population !== b.zone.population) {\n\t\t\treturn b.zone.population - a.zone.population;\n\t\t}\n\t\treturn b.zone.name.localeCompare(a.zone.name);\n\t}\n\n\tfunction addToGuesses (name, offsets) {\n\t\tvar i, offset;\n\t\tarrayToInt(offsets);\n\t\tfor (i = 0; i < offsets.length; i++) {\n\t\t\toffset = offsets[i];\n\t\t\tguesses[offset] = guesses[offset] || {};\n\t\t\tguesses[offset][name] = true;\n\t\t}\n\t}\n\n\tfunction guessesForUserOffsets (offsets) {\n\t\tvar offsetsLength = offsets.length,\n\t\t\tfilteredGuesses = {},\n\t\t\tout = [],\n\t\t\ti, j, guessesOffset;\n\n\t\tfor (i = 0; i < offsetsLength; i++) {\n\t\t\tguessesOffset = guesses[offsets[i].offset] || {};\n\t\t\tfor (j in guessesOffset) {\n\t\t\t\tif (guessesOffset.hasOwnProperty(j)) {\n\t\t\t\t\tfilteredGuesses[j] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (i in filteredGuesses) {\n\t\t\tif (filteredGuesses.hasOwnProperty(i)) {\n\t\t\t\tout.push(names[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t}\n\n\tfunction rebuildGuess () {\n\n\t\t// use Intl API when available and returning valid time zone\n\t\ttry {\n\t\t\tvar intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\t\t\tif (intlName && intlName.length > 3) {\n\t\t\t\tvar name = names[normalizeName(intlName)];\n\t\t\t\tif (name) {\n\t\t\t\t\treturn name;\n\t\t\t\t}\n\t\t\t\tlogError(\"Moment Timezone found \" + intlName + \" from the Intl api, but did not have that data loaded.\");\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// Intl unavailable, fall back to manual guessing.\n\t\t}\n\n\t\tvar offsets = userOffsets(),\n\t\t\toffsetsLength = offsets.length,\n\t\t\tguesses = guessesForUserOffsets(offsets),\n\t\t\tzoneScores = [],\n\t\t\tzoneScore, i, j;\n\n\t\tfor (i = 0; i < guesses.length; i++) {\n\t\t\tzoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);\n\t\t\tfor (j = 0; j < offsetsLength; j++) {\n\t\t\t\tzoneScore.scoreOffsetAt(offsets[j]);\n\t\t\t}\n\t\t\tzoneScores.push(zoneScore);\n\t\t}\n\n\t\tzoneScores.sort(sortZoneScores);\n\n\t\treturn zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;\n\t}\n\n\tfunction guess (ignoreCache) {\n\t\tif (!cachedGuess || ignoreCache) {\n\t\t\tcachedGuess = rebuildGuess();\n\t\t}\n\t\treturn cachedGuess;\n\t}\n\n\t/************************************\n\t\tGlobal Methods\n\t************************************/\n\n\tfunction normalizeName (name) {\n\t\treturn (name || '').toLowerCase().replace(/\\//g, '_');\n\t}\n\n\tfunction addZone (packed) {\n\t\tvar i, name, split, normalized;\n\n\t\tif (typeof packed === \"string\") {\n\t\t\tpacked = [packed];\n\t\t}\n\n\t\tfor (i = 0; i < packed.length; i++) {\n\t\t\tsplit = packed[i].split('|');\n\t\t\tname = split[0];\n\t\t\tnormalized = normalizeName(name);\n\t\t\tzones[normalized] = packed[i];\n\t\t\tnames[normalized] = name;\n\t\t\taddToGuesses(normalized, split[2].split(' '));\n\t\t}\n\t}\n\n\tfunction getZone (name, caller) {\n\n\t\tname = normalizeName(name);\n\n\t\tvar zone = zones[name];\n\t\tvar link;\n\n\t\tif (zone instanceof Zone) {\n\t\t\treturn zone;\n\t\t}\n\n\t\tif (typeof zone === 'string') {\n\t\t\tzone = new Zone(zone);\n\t\t\tzones[name] = zone;\n\t\t\treturn zone;\n\t\t}\n\n\t\t// Pass getZone to prevent recursion more than 1 level deep\n\t\tif (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {\n\t\t\tzone = zones[name] = new Zone();\n\t\t\tzone._set(link);\n\t\t\tzone.name = names[name];\n\t\t\treturn zone;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tfunction getNames () {\n\t\tvar i, out = [];\n\n\t\tfor (i in names) {\n\t\t\tif (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {\n\t\t\t\tout.push(names[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn out.sort();\n\t}\n\n\tfunction getCountryNames () {\n\t\treturn Object.keys(countries);\n\t}\n\n\tfunction addLink (aliases) {\n\t\tvar i, alias, normal0, normal1;\n\n\t\tif (typeof aliases === \"string\") {\n\t\t\taliases = [aliases];\n\t\t}\n\n\t\tfor (i = 0; i < aliases.length; i++) {\n\t\t\talias = aliases[i].split('|');\n\n\t\t\tnormal0 = normalizeName(alias[0]);\n\t\t\tnormal1 = normalizeName(alias[1]);\n\n\t\t\tlinks[normal0] = normal1;\n\t\t\tnames[normal0] = alias[0];\n\n\t\t\tlinks[normal1] = normal0;\n\t\t\tnames[normal1] = alias[1];\n\t\t}\n\t}\n\n\tfunction addCountries (data) {\n\t\tvar i, country_code, country_zones, split;\n\t\tif (!data || !data.length) return;\n\t\tfor (i = 0; i < data.length; i++) {\n\t\t\tsplit = data[i].split('|');\n\t\t\tcountry_code = split[0].toUpperCase();\n\t\t\tcountry_zones = split[1].split(' ');\n\t\t\tcountries[country_code] = new Country(\n\t\t\t\tcountry_code,\n\t\t\t\tcountry_zones\n\t\t\t);\n\t\t}\n\t}\n\n\tfunction getCountry (name) {\n\t\tname = name.toUpperCase();\n\t\treturn countries[name] || null;\n\t}\n\n\tfunction zonesForCountry(country, with_offset) {\n\t\tcountry = getCountry(country);\n\n\t\tif (!country) return null;\n\n\t\tvar zones = country.zones.sort();\n\n\t\tif (with_offset) {\n\t\t\treturn zones.map(function (zone_name) {\n\t\t\t\tvar zone = getZone(zone_name);\n\t\t\t\treturn {\n\t\t\t\t\tname: zone_name,\n\t\t\t\t\toffset: zone.utcOffset(new Date())\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\treturn zones;\n\t}\n\n\tfunction loadData (data) {\n\t\taddZone(data.zones);\n\t\taddLink(data.links);\n\t\taddCountries(data.countries);\n\t\ttz.dataVersion = data.version;\n\t}\n\n\tfunction zoneExists (name) {\n\t\tif (!zoneExists.didShowError) {\n\t\t\tzoneExists.didShowError = true;\n\t\t\t\tlogError(\"moment.tz.zoneExists('\" + name + \"') has been deprecated in favor of !moment.tz.zone('\" + name + \"')\");\n\t\t}\n\t\treturn !!getZone(name);\n\t}\n\n\tfunction needsOffset (m) {\n\t\tvar isUnixTimestamp = (m._f === 'X' || m._f === 'x');\n\t\treturn !!(m._a && (m._tzm === undefined) && !isUnixTimestamp);\n\t}\n\n\tfunction logError (message) {\n\t\tif (typeof console !== 'undefined' && typeof console.error === 'function') {\n\t\t\tconsole.error(message);\n\t\t}\n\t}\n\n\t/************************************\n\t\tmoment.tz namespace\n\t************************************/\n\n\tfunction tz (input) {\n\t\tvar args = Array.prototype.slice.call(arguments, 0, -1),\n\t\t\tname = arguments[arguments.length - 1],\n\t\t\tzone = getZone(name),\n\t\t\tout  = moment.utc.apply(null, args);\n\n\t\tif (zone && !moment.isMoment(input) && needsOffset(out)) {\n\t\t\tout.add(zone.parse(out), 'minutes');\n\t\t}\n\n\t\tout.tz(name);\n\n\t\treturn out;\n\t}\n\n\ttz.version      = VERSION;\n\ttz.dataVersion  = '';\n\ttz._zones       = zones;\n\ttz._links       = links;\n\ttz._names       = names;\n\ttz._countries\t= countries;\n\ttz.add          = addZone;\n\ttz.link         = addLink;\n\ttz.load         = loadData;\n\ttz.zone         = getZone;\n\ttz.zoneExists   = zoneExists; // deprecated in 0.1.0\n\ttz.guess        = guess;\n\ttz.names        = getNames;\n\ttz.Zone         = Zone;\n\ttz.unpack       = unpack;\n\ttz.unpackBase60 = unpackBase60;\n\ttz.needsOffset  = needsOffset;\n\ttz.moveInvalidForward   = true;\n\ttz.moveAmbiguousForward = false;\n\ttz.countries    = getCountryNames;\n\ttz.zonesForCountry = zonesForCountry;\n\n\t/************************************\n\t\tInterface with Moment.js\n\t************************************/\n\n\tvar fn = moment.fn;\n\n\tmoment.tz = tz;\n\n\tmoment.defaultZone = null;\n\n\tmoment.updateOffset = function (mom, keepTime) {\n\t\tvar zone = moment.defaultZone,\n\t\t\toffset;\n\n\t\tif (mom._z === undefined) {\n\t\t\tif (zone && needsOffset(mom) && !mom._isUTC) {\n\t\t\t\tmom._d = moment.utc(mom._a)._d;\n\t\t\t\tmom.utc().add(zone.parse(mom), 'minutes');\n\t\t\t}\n\t\t\tmom._z = zone;\n\t\t}\n\t\tif (mom._z) {\n\t\t\toffset = mom._z.utcOffset(mom);\n\t\t\tif (Math.abs(offset) < 16) {\n\t\t\t\toffset = offset / 60;\n\t\t\t}\n\t\t\tif (mom.utcOffset !== undefined) {\n\t\t\t\tvar z = mom._z;\n\t\t\t\tmom.utcOffset(-offset, keepTime);\n\t\t\t\tmom._z = z;\n\t\t\t} else {\n\t\t\t\tmom.zone(offset, keepTime);\n\t\t\t}\n\t\t}\n\t};\n\n\tfn.tz = function (name, keepTime) {\n\t\tif (name) {\n\t\t\tif (typeof name !== 'string') {\n\t\t\t\tthrow new Error('Time zone name must be a string, got ' + name + ' [' + typeof name + ']');\n\t\t\t}\n\t\t\tthis._z = getZone(name);\n\t\t\tif (this._z) {\n\t\t\t\tmoment.updateOffset(this, keepTime);\n\t\t\t} else {\n\t\t\t\tlogError(\"Moment Timezone has no data for \" + name + \". See http://momentjs.com/timezone/docs/#/data-loading/.\");\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif (this._z) { return this._z.name; }\n\t};\n\n\tfunction abbrWrap (old) {\n\t\treturn function () {\n\t\t\tif (this._z) { return this._z.abbr(this); }\n\t\t\treturn old.call(this);\n\t\t};\n\t}\n\n\tfunction resetZoneWrap (old) {\n\t\treturn function () {\n\t\t\tthis._z = null;\n\t\t\treturn old.apply(this, arguments);\n\t\t};\n\t}\n\n\tfunction resetZoneWrap2 (old) {\n\t\treturn function () {\n\t\t\tif (arguments.length > 0) this._z = null;\n\t\t\treturn old.apply(this, arguments);\n\t\t};\n\t}\n\n\tfn.zoneName  = abbrWrap(fn.zoneName);\n\tfn.zoneAbbr  = abbrWrap(fn.zoneAbbr);\n\tfn.utc       = resetZoneWrap(fn.utc);\n\tfn.local     = resetZoneWrap(fn.local);\n\tfn.utcOffset = resetZoneWrap2(fn.utcOffset);\n\n\tmoment.tz.setDefault = function(name) {\n\t\tif (major < 2 || (major === 2 && minor < 9)) {\n\t\t\tlogError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');\n\t\t}\n\t\tmoment.defaultZone = name ? getZone(name) : null;\n\t\treturn moment;\n\t};\n\n\t// Cloning a moment should include the _z property.\n\tvar momentProperties = moment.momentProperties;\n\tif (Object.prototype.toString.call(momentProperties) === '[object Array]') {\n\t\t// moment 2.8.1+\n\t\tmomentProperties.push('_z');\n\t\tmomentProperties.push('_a');\n\t} else if (momentProperties) {\n\t\t// moment 2.7.0\n\t\tmomentProperties._z = null;\n\t}\n\n\t// INJECT DATA\n\n\treturn moment;\n}));\n"],"sourceRoot":""}